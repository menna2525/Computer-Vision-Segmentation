import numpy as np
import cv2
import matplotlib.pyplot as plt


# Pick the image used for NN:

path = r'C:\Users\New-Amr\PyChram Projects\3096.jpg'
img = cv2.imread(path, 1)
cv2.imshow('Original image', img)
h, w, s = img.shape
segmented_img = np.zeros_like(img)
counter = 0
# Tke samples from the original image

(ROI_bg_x, ROI_bg_y, ROI_bg_w, ROI_bg_h) = cv2.selectROI(img, showCrosshair=0)
(ROI_obj_x, ROI_obj_y, ROI_obj_w, ROI_obj_h) = cv2.selectROI(img, showCrosshair=0)
# Calculate mean values for object and background

mean_bg = np.sum(img[ROI_bg_y:ROI_bg_y + ROI_bg_h, ROI_bg_x:ROI_bg_x + ROI_bg_w], axis=(0, 1), keepdims=True) / (
        ROI_bg_h * ROI_bg_w)
mean_obj = np.sum(img[ROI_obj_y:ROI_obj_y + ROI_obj_h, ROI_obj_x:ROI_obj_x + ROI_obj_w], axis=(0, 1),
                  keepdims=True) / (ROI_obj_h * ROI_obj_w)
for m in range(h):
    for n in range(w):
        # Calculate the distances for both object and background

         
        distance_obj = np.linalg.normimg[m, n] - img[ROI_obj_y:ROI_obj_y + ROI_obj_h, ROI_obj_x:ROI_obj_x + ROI_obj_w],axis=2)
         
        distance_bg = np.linalg.normimg[m, n] - img[ROI_bg_y:ROI_bg_y + ROI_bg_h, ROI_bg_x:ROI_bg_x + ROI_bg_w],axis=2)
      

        # Compare between the 2 distances of object and background and assign values to new image

        if np.min(distance_obj) < np.min(distance_bg):
            segmented_img[m, n] = mean_obj
        else:
            segmented_img[m, n] = mean_bg
  
cv2.imshow('Segmented Image', segmented_img)
cv2.waitKey(0)