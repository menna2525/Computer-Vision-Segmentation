import numpy as np
import cv2
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix

# Pick the image used for SVM:
path = r'C:\Users\New-Amr\PyChram Projects\41033.jpg'
img = cv2.imread(path, 1)
cv2.imshow('Original Image', img)
h, w, s = img.shape

# Get THREE samples for the image --> one for object, and one for the background to ensure the result

(ROI_bg1_x, ROI_bg1_y, ROI_bg1_w, ROI_bg1_h) = cv2.selectROI(img, showCrosshair=0)
(ROI_obj_x, ROI_obj_y, ROI_obj_w, ROI_obj_h) = cv2.selectROI(img, showCrosshair=0)

mean_bg1 = np.sum(img[ROI_bg1_y:ROI_bg1_y + ROI_bg1_h, ROI_bg1_x:ROI_bg1_x + ROI_bg1_w], axis=(0, 1),
                  keepdims=True) / (ROI_bg1_h * ROI_bg1_w)
mean_obj = np.sum(img[ROI_obj_y:ROI_obj_y + ROI_obj_h, ROI_obj_x:ROI_obj_x + ROI_obj_w], axis=(0, 1),
                  keepdims=True) / (ROI_obj_h * ROI_obj_w)

# Create two arrays for object and background

bg = np.array(img[ROI_bg1_y:ROI_bg1_y + ROI_bg1_h, ROI_bg1_x:ROI_bg1_x + ROI_bg1_w])
obj = np.array(img[ROI_obj_y:ROI_obj_y + ROI_obj_h, ROI_obj_x:ROI_obj_x + ROI_obj_w])

# flatten both the object and background

bg1 = bg.reshape(-1, bg.shape[-1])
obj1 = obj.reshape(-1, bg.shape[-1])

# Create  labels array for training data

y = np.array(np.zeros((obj1.shape[0] + bg1.shape[0], 1)))

# assign values to object and background

for i in range(obj1.shape[0]):
    y[i, :] = 1

# Add the 2 arrays of object and background to X

X = np.concatenate([obj1, bg1])

# Training my data

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)

# Choose type of classifier

svclassifier = SVC(kernel='linear', C=1.0)
svclassifier.fit(X, y.ravel())
counter = 0
new_img = np.zeros_like(img)

# Assign mean intensity to pixel to classify them:

for r in range(img.shape[0]):
    for c in range(img.shape[1]):
        y_pred = svclassifier.predict([img[r, c, :]])
        counter = counter + 1
        print(counter)
        if y_pred == 0:
            new_img[r, c, :] = mean_bg1
        else:
            new_img[r, c, :] = mean_obj

cv2.imshow('Segmented Image', new_img)
cv2.waitKey(0)
